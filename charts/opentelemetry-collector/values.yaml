global:
  name: aspecto
  namespace: dev
  env: {}
  aspecto:
    existingSecret: false
    apiToken: ''
    interval: 60
  rolloutStrategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 3
    type: RollingUpdate
  metadata:
    shared:
      annotations:
        imageProvidor: 'aspecto.io'
      labels:
        app: opentelemetry
        receiverVersion: "{{ .Values.receiver.image.version | default .Values.global.image.version }}"
        collectorVersion: "{{ .Values.collector.image.version | default .Values.global.image.version }}"
        chart/name: "{{ .Chart.Name }}"
        chart/release: "{{ .Chart.Version }}"
    pod:
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
    service:
      annotations: {}
      labels: {}
    configMap:
      annotations: {}
      labels: {}
    hpa:
      annotations: {}
      labels: {}
    virtualService:
      annotations: {}
      labels: {}
    destinationRule:
      annotations: {}
      labels: {}
    gateway:
      annotations: {}
      labels: {}
    secret:
      annotations: {}
      labels: {}
    serviceMonitor:
      annotations: {}
      labels: {}
    podMonitor:
      annotations: {}
      labels: {}
  image:
    repository: 'public.ecr.aws/x3s3n8k7'
    pullPolicy: Always
    version: 'v0.0.3'

receiver:
  image:
    repository: ''
    policy: IfNotPresent
    name: 'otelcol-loadbalancing'
    version: ''

  metadata:
    name: receiver
    namespace: ''
    shared:
      annotations: {}
      labels: {}
    pod:
      annotations: {}
      labels:
        component: otel-receiver-pod
    deployment:
      annotations: {}
      labels: {}
    service:
      annotations: {}
      labels:
        component: otel-receiver-service
    configMap:
      annotations: {}
      labels: {}
    hpa:
      annotations: {}
      labels: {}
    virtualService:
      annotations: {}
      labels: {}
    destinationRule:
      annotations: {}
      labels: {}
    gateway:
      annotations: {}
      labels: {}
    serviceMonitor:
      annotations: {}
      labels: {}
    podMonitor:
      annotations: {}
      labels: {}

  env: {}

  monitoring:
    serviceMonitoring:
      enable: true
      promNamespace: monitoring
      portName: metrics
    podMonitoring:
      enable: false
      podMetricsEndpoints:
        # - port: prometheus

  specs:
    jeager_collector:
      enable: true
    zipkin_collector:
      enable: false
    configuration:
      exporters:
        load_balancing:
          protocol:
            otlp:
              timeout: 1s
              tls:
                insecure: true
            resolver:
              dns:
                hostname:
                port: 4317
      log:
        enable: true
        level: debug
      endpoint: 'aspecto-testing-gateway'

    autoscaling:
      enable: true
      defaultReplicaCount: 3
      minReplicas: 3
      maxReplicas: 20
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75

    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi

    probe:
      readinessProbe:
        httpGet:
          path: /
          port: 8090
        initialDelaySeconds: 30
        periodSeconds: 3
      livenessProbe:
        httpGet:
          path: /
          port: 8090
        initialDelaySeconds: 30
        periodSeconds: 30

    volumes:
      serviceConfig:
        name: service-configuration
        mountPath: /config
        fileName: receiver-config.yml
      extraVolumes: []
      # - name: configMapName
      #   mountPath: /folder/path
      #   subPath: filename.ext
      extraSecretMounts: []
      # - name: secret-files
      #   mountPath: /path/to/file
      #   secretName: secret-key-name
      #   readOnly: true|false

    network:
      localListenerIp: 0.0.0.0
      type: None
      ports:
        - name: grpc          # Default endpoint for OpenTelemetry gRPC receiver.
          internalPort: 4317
          externalPort: 4317
          protocol: TCP
        - name: http          # Default endpoint for OpenTelemetry HTTP receiver.
          internalPort: 4318
          externalPort: 4318
          protocol: TCP
        - metrics:
          name: metrics       # Default endpoint for querying metrics.
          internalPort: 8888
          externalPort: 8888
          protocol: TCP
        - name: health-check  # Default endpoint for querying open-telemetry health.
          internalPort: 8090
          externalPort: 8090
          protocol: TCP
        - name: metrics-col
          internalPort: 9090
          externalPort: 9090
          protocol: TCP
        - name: zipkin
          internalPort: 9411
          externalPort: 9411
          protocol: TCP
        - name: jaeger-grpc
          internalPort: 14250
          externalPort: 14250
          protocol: TCP
        - name: jaeger-http
          internalPort: 14268
          externalPort: 14268
          protocol: TCP

      istio:
        enabled: false
        destinationRuleName: aspecto-otel-receiver-load-balancer-detinationRule
        defaultHostHeader: aspecto-otel-receiver-load-balancer.io
        subnetName: receiver
        trafficPolicy:
          loadBalancer:
            simple: ROUND_ROBIN
        rules:
        - name: 'grpc'
          ingress:
            - uriPrefix: "/"
              destinationPort: 4317
          hostHeader:
        - name: 'http'
          ingress:
            - uriPrefix: "/"
              destinationPort: 4318
          hostHeader:
        - name: 'health-check'
          ingress:
            - uriPrefix: "/"
              destinationPort: 8090
          hostHeader:
        - name: 'metrics'
          ingress:
            - uriPrefix: "/"
              destinationPort: 8888
          hostHeader:
        - name: 'zipkin'
          ingress:
            - uriPrefix: "/"
              destinationPort: 9411
          hostHeader:
        - name: 'jaeger-grpc'
          ingress:
            - uriPrefix: "/"
              destinationPort: 14250
          hostHeader:
        - name: 'jaeger-http'
          ingress:
            - uriPrefix: "/"
              destinationPort: 14268
          hostHeader:

    services:
      - name: load-balancer
        # Currently, we support 3 service types (ClusterIP, LoadBalancer)
        # Internal - An internal service is a service that would only be accessed from inside the Kubernetes cluster.
        # It will receive an internal IP address that other Kubernetes services could access to consume the service from.
        #
        # ClusterIP - This will create a simple service that would supply DNS round-robin load balancing for the service.
        # This  will give external cluster access by a dedicated DNS address: <serviceName>.<namespace>.svc.kube.<cluster>.com
        # This option is for when you need the most basic and simple load balancing.
        #
        # LoadBalancer - This is for when you need complex load balancing options. Based on user headers or specific uri prefixes.
        # This is also the only option that would utilize Istio (https://istio.io/).
        serviceType: LoadBalancer
        loadBalancer:
          simple: LEAST_CONN
          host: aspecto-otel-receiver-load-balancer.io

        selector:
          component: otel-receiver-pod

        ports:
          - name: grpc          # Name of the port (Should match one of the ports in the containers)
            type: grpc          # The Type of the port the service is exposing. The valid options are <http/http2/grpc/mongo/redis/tcp/tls/udp>
            protocol: TCP
            externalPort: 4317  # Port the service exposes
            internalPort: 4317  # Port the service accesses when redirecting to the pod
            loadBalancer:
              simple:
          - name: http
            type: http
            externalPort: 4318
            internalPort: 4318
            protocol: TCP
            loadBalancer:
              simple:
          - name: health-check
            type: http
            externalPort: 8090
            internalPort: 8090
            protocol: TCP
            loadBalancer:
              simple:
          - name: metrics
            type: http
            externalPort: 8888
            internalPort: 8888
            protocol: TCP
            loadBalancer:
              simple:
          - name: metrics-col
            type: http
            externalPort: 9090
            internalPort: 9090
            protocol: TCP
            loadBalancer:
              simple:
          - name: zipkin
            type: http
            externalPort: 9411
            internalPort: 9411
            protocol: TCP
            loadBalancer:
              simple:
          - name: jaeger-grpc
            type: TCP
            externalPort: 14250
            internalPort: 14250
            protocol: TCP
            loadBalancer:
              simple:
          - name: jaeger-http
            type: http
            externalPort: 14268
            internalPort: 14268
            protocol: TCP
            loadBalancer:
              simple:
collector:
  image:
    repository: ''
    policy: Always
    name: 'otelcol-sampling'
    version: ''

  metadata:
    name: collector
    namespace: ''
    shared:
      annotations: {}
      labels: {}
    pod:
      annotations: {}
      labels:
        component: otel-collector
    deployment:
      annotations: {}
      labels: {}
    service:
      annotations: {}
      labels:
        component: otel-collector-service
    configMap:
      annotations: {}
      labels: {}
    hpa:
      annotations: {}
      labels: {}
    virtualService:
      annotations: {}
      labels: {}
    destinationRule:
      annotations: {}
      labels: {}
    gateway:
      annotations: {}
      labels: {}
    serviceMonitor:
      annotations: {}
      labels: {}
    podMonitor:
      annotations: {}
      labels: {}

  env: {}

  monitoring:
    serviceMonitoring:
      enable: true
      promNamespace: monitoring
      portName: metrics
    podMonitoring:
      enable: false
      podMetricsEndpoints:
      # - port: prometheus

  specs:
    jeager_collector: true
    zipkin_collector: false
    configuration:
      endpoint: https://collector.aspecto.io
      decision_wait: 10s
      num_traces: 100
      expected_new_traces_per_sec: 10
      policies: $$aspecto:tail_sampling_policy
      log:
        enable: true
        level: debug

    autoscaling:
      enable: true
      defaultReplicaCount: 3
      minReplicas: 3
      maxReplicas: 20
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75

    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi

    probe:
      readinessProbe:
        httpGet:
          path: /
          port: 8090
        initialDelaySeconds: 10
        periodSeconds: 3
      livenessProbe:
        httpGet:
          path: /
          port: 8090
        initialDelaySeconds: 10
        periodSeconds: 30

    volumes:
      serviceConfig:
        name: service-configuration
        mountPath: /config
        fileName: collector-config.yml
      extraVolumes: []
      # - name: configMapName
      #   mountPath: /folder/path
      #   subPath: filename.ext
      extraSecretMounts: []
      # - name: secret-files
      #   mountPath: /path/to/file
      #   secretName: secret-key-name
      #   readOnly: true|false

    network:
      localListenerIp: 0.0.0.0
      type: LoadBalancer
      serviceName: opentelemetry-sampling
      ports:
        - name: grpc          # Default endpoint for OpenTelemetry gRPC receiver.
          internalPort: 4317
          externalPort: 4317
          protocol: TCP
        - name: http          # Default endpoint for OpenTelemetry HTTP receiver.
          internalPort: 4318
          externalPort: 4318
          protocol: TCP
        - metrics:
          name: metrics       # Default endpoint for querying metrics.
          internalPort: 8888
          externalPort: 8888
          protocol: TCP
        - name: health-check  # Default endpoint for querying open-telemetry health.
          internalPort: 8090
          externalPort: 8090
          protocol: TCP
        - name: metrics-col
          internalPort: 9090
          externalPort: 9090
          protocol: TCP
        - name: zipkin
          internalPort: 9411
          externalPort: 9411
          protocol: TCP
        - name: jaeger-grpc
          internalPort: 14250
          externalPort: 14250
          protocol: TCP
        - name: jaeger-http
          internalPort: 14268
          externalPort: 14268
          protocol: TCP

      istio:
        enabled: false
        destinationRuleName: aspecto-otel-collector-tail-sampling-detinationRule
        defaultHostHeader: aspecto-otel-receiver-load-balancer.io
        subnetName: collector
        trafficPolicy:
          connectionPool:
            tcp:
              maxConnections: 100
              connectTimeout: 30ms
              tcpKeepalive:
                time: 7200s
                interval: 75s
        rules:
          - name: 'grpc'
            ingress:
              - uriPrefix: "/"
                destinationPort: 4317
            hostHeader:
          - name: 'http'
            ingress:
              - uriPrefix: "/"
                destinationPort: 4318
            hostHeader:
          - name: 'health-check'
            ingress:
              - uriPrefix: "/"
                destinationPort: 8090
            hostHeader:
          - name: 'metrics'
            ingress:
              - uriPrefix: "/"
                destinationPort: 8888
            hostHeader:
          - name: 'zipkin'
            ingress:
              - uriPrefix: "/"
                destinationPort: 9411
            hostHeader:
          - name: 'jaeger-grpc'
            ingress:
              - uriPrefix: "/"
                destinationPort: 14250
            hostHeader:
          - name: 'jaeger-http'
            ingress:
              - uriPrefix: "/"
                destinationPort: 14268
            hostHeader:

    services:
      - name: tail-sampling
        # Currently, we support 2 service types (ClusterIP, LoadBalancer)
        # Internal - An internal service is a service that would only be accessed from inside the Kubernetes cluster.
        # It will receive an internal IP address that other Kubernetes services could access to consume the service from.
        #
        # ClusterIP - This will create a simple service that would supply DNS round-robin load balancing for the service.
        # This  will give external cluster access by a dedicated DNS address: <serviceName>.<namespace>.svc.kube.<cluster>.com
        # This option is for when you need the most basic and simple load balancing.
        #
        # LoadBalancer - This is for when you need complex load balancing options. Based on user headers or specific uri prefixes.
        # This is also the only option that would utilize Istio (https://istio.io/).
        serviceType: ClusterIP
        loadBalancer:
          simple: LEAST_CONN
          host: aspecto-otel-collector-load-balancer.io

        selector:
          component: otel-collector

        ports:
          - name: grpc            # Name of the port (Should match one of the ports in the containers)
            type: grpc            # The Type of the port the service is exposing. The valid options are <http/http2/grpc/mongo/redis/tcp/tls/udp>
            externalPort: 4317    # Port the service exposes
            internalPort: 4317    # Port the service accesses when redirecting to the pod
            protocol: TCP
            selector:
              component: collector
            loadBalancer:
              simple:
          - name: http
            type: http
            externalPort: 4318
            internalPort: 4318
            protocol: TCP
            selector:
              component: collector
            loadBalancer:
              # We support only simple load balancing algorithms. the valid options are <ROUND_ROBIN/LEAST_CONN/RANDOM>
              simple:
          - name: zipkin
            type: http
            externalPort: 9411
            internalPort: 9411
            protocol: TCP
            loadBalancer:
              simple:
          - name: health-check
            type: http
            externalPort: 8090
            internalPort: 8090
            protocol: TCP
            loadBalancer:
              simple:
          - name: metrics
            type: http
            externalPort: 8888
            internalPort: 8888
            protocol: TCP
            loadBalancer:
              simple:
          - name: metrics-col
            type: http
            externalPort: 9090
            internalPort: 9090
            protocol: TCP
            loadBalancer:
              simple:
          - name: jaeger-grpc
            type: TCP
            externalPort: 14250
            internalPort: 14250
            protocol: TCP
            loadBalancer:
              simple:
          - name: jaeger-http
            type: http
            externalPort: 14268
            internalPort: 14268
            protocol: TCP
            loadBalancer:
              simple:
